/*
 * Modified 28.03.2023
 * Auto-generated by Frida. Please modify to match the signature of ASB.
 * This stub is currently auto-generated from manpages when available.
 *
 * For full API reference, see: https://frida.re/docs/javascript-api/
 */

{
  /**
   * Called synchronously when about to call AmsiScanBuffer.
   *
   * @this {object} - Object allowing you to store state for use in onLeave.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {array} args - Function arguments represented as an array of NativePointer objects.
   * For example use args[0].readUtf8String() if the first argument is a pointer to a C string encoded as UTF-8.
   * It is also possible to modify arguments by assigning a NativePointer object to an element of this array.
   * @param {object} state - Object allowing you to keep state across function calls.
   * Only one JavaScript function will execute at a time, so do not worry about race-conditions.
   * However, do not use this to store function arguments across onEnter/onLeave, but instead
   * use "this" which is an object for keeping state local to an invocation.
   */
  onEnter: function(log, args, state) {
    log('AmsiScanBuffer()');
    this.amsiContext = args[0];
    this.buffer = Memory.readUtf16String(args[1]);
    this.lengthOut = args[2];
    this.contentName = args[3];
    this.amsiSession = args[4];
    this.result = args[5];
    this.resultPointer = args[5];
  },

  /**
   * Called synchronously when about to return from AmsiScanBuffer.
   *
   * See onEnter for details.
   *
   * @this {object} - Object allowing you to access state stored in onEnter.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {NativePointer} retval - Return value represented as a NativePointer object.
   * @param {object} state - Object allowing you to keep state across function calls.
   */
  onLeave: function(log, retval, state) {
    resultPointer = this.resultPointer;
    this.resultId = Memory.readUInt(resultPointer)

    if (this.resultId != 1)
    {
    	log('|- amsiContext: ' + this.amsiContext );
    	log('|- buffer: ' + this.buffer);
    	log('|- length: ' + this.lengthOut );
    	log('|- contentName ' + this.contentName );
    	log('|- amsiSession ' + this.amsiSession );
    	log('|- result ' + this.resultId + "\n");
    	log('[*] AmsiScanBuffer() Exit');
    }
  }
}
